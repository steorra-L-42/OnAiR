pipeline {
    agent any

    environment {
        LANGCHAIN_PATH = 'backend/langchain'
        MAIN_PATH = 'backend/main'
        STATION_PATH = 'backend/station'
        MEDIA_PATH = 'backend/media'
        LOG_PATH = 'backend/log'
        DOCKER_REGISTRY = 'parkdonghyeon' // Docker Registry 설정
    }

    triggers {
        // GitLab webhook을 통한 트리거 설정
        gitlab(triggerOnPush: true, triggerOnMergeRequest: true)
    }

    stages {
        // step 1) 워크스페이스 초기화
        stage('Initialize Workspace') {
            steps {
                echo "Cleaning workspace..."
                deleteDir() // 워크스페이스 초기화
            }
        }

        stage('Clone Repository') {
            steps {
                echo "Cloning repository..."
                // SCM 설정을 통해 GitLab 리포지토리 클론
                git url: 'https://lab.ssafy.com/s11-final/S11P31D204.git', branch: 'dev', credentialsId: 'GITLAB_CREDENTIALS'
            }
        }

        // 메인 이미지 빌드 및 푸시
        stage('Build and Push Main Image') {
            steps {
                dir("${MAIN_PATH}") {
                    echo "Building JAR file using Gradle..."
                    sh 'chmod +x ./gradlew'  // gradlew에 실행 권한 부여
                    sh './gradlew build -x test'  // Gradle 빌드 명령어 실행
                    echo "Building Docker image for Main server..."
                    withCredentials([usernamePassword(credentialsId: 'DOCKERHUB_CREDENTIALS', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        // Docker Hub 로그인
                        sh 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin'
                        
                        script {
                            docker.build("${DOCKER_REGISTRY}/main_image:latest", ".").push()
                        }
                    }
                }
            }
        }
        // 미디어 서버 빌드 및 푸시 
        stage('Build and Push Media Image') {
            steps {
                dir("${MEDIA_PATH}") {
                    echo "Building Docker image for Media server..."
                    withCredentials([usernamePassword(credentialsId: 'DOCKERHUB_CREDENTIALS', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        // Docker Hub 로그인
                        sh 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin'
                        
                        script {
                            docker.build("${DOCKER_REGISTRY}/media_image:latest", ".").push()
                        }
                    }
                }
            }
        }
        

        // Docker Compose로 배포
        stage('Deploy with Docker Compose') {
            steps {
                echo "Deploying all services using Docker Compose..."
                script {
                    // env 파일 설정
                    withCredentials([file(credentialsId: 'ENV', variable: 'ENV_FILE_PATH')]) {
                        // Docker Compose 파일이 있는 디렉토리로 이동
                        sh "cp ${ENV_FILE_PATH} .env"
                        dir('exec') {
                            echo "copy env ..."
                            sh "cp ${ENV_FILE_PATH} .env"
                            // Docker Stack 배포
                            sh 'docker stack deploy -c onair-compose.yaml onair'
                            sh 'docker stack deploy -c nginx-compose.yaml onair'
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Deployment succeeded."
        }
        
        failure {
            echo "Deployment failed. Please check the logs."
        }
    }
}
