pipeline {
    agent any

    environment {
        BUILD_BRANCH = 'dev'
        LANGCHAIN_PATH = 'backend/langchain'
        MAIN_PATH = 'backend/main'
        STATION_PATH = 'backend/station'
        WEBHOOK_PATH = 'backend/monitor/webhook'
        MEDIA_PATH = 'backend/media'
        DOCKER_REGISTRY = 'parkdonghyeon'
        EC2_ID = 'ubuntu'
        EC2_ADDR = 'wonyoung.on-air.me'
    }

    stages {
        // step 1) 워크스페이스 초기화
        stage('Initialize Workspace') {
            steps {
                echo "Cleaning workspace..."
                deleteDir() // 워크스페이스 초기화
            }
        }

        stage('Clone Repository') {
            steps {
                echo "Cloning repository..."
                // SCM 설정을 통해 GitLab 리포지토리 클론
                git url: 'https://lab.ssafy.com/s11-final/S11P31D204.git', branch: "${BUILD_BRANCH}", credentialsId: 'GITLAB_CREDENTIALS'
                echo "ls -al"
            }
        }

        // 메인 이미지 빌드 및 푸시
        stage('Build and Push Main Image') {
            steps {
                dir("${MAIN_PATH}") {
                    echo "Building JAR file using Gradle..."
                    sh 'chmod +x ./gradlew'  // gradlew에 실행 권한 부여
                    sh './gradlew build -x test'  // Gradle 빌드 명령어 실행
                    echo "Building Docker image for Main server..."
                    withCredentials([usernamePassword(credentialsId: 'DOCKERHUB_CREDENTIALS', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        // Docker Hub 로그인
                        sh 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin'
                        
                        script {
                            docker.build("${DOCKER_REGISTRY}/main_image:latest", ".").push()
                        }
                    }
                }
            }
        }
        // 미디어 서버 빌드 및 푸시 
        stage('Build and Push Media Image') {
            steps {
                dir("${MEDIA_PATH}") {
                    echo "Building Docker image for Media server..."
                    withCredentials([usernamePassword(credentialsId: 'DOCKERHUB_CREDENTIALS', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        // Docker Hub 로그인
                        sh 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin'
                        script {
                            docker.build("${DOCKER_REGISTRY}/media_image:latest", ".").push()
                        }
                    }
                }
            }
        }

        // 스테이션 서버 빌드 및 푸시
        stage('Build and Push Station Image') {
            steps {
                dir("${STATION_PATH}") {
                    echo "Building Docker image for Media server..."
                    withCredentials([usernamePassword(credentialsId: 'DOCKERHUB_CREDENTIALS', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        // Docker Hub 로그인
                        sh 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin'
                        
                        script {
                            docker.build("${DOCKER_REGISTRY}/station_image:latest", ".").push()
                        }
                    }
                }
            }
        }

        // 웹훅 서버 빌드 및 푸시
//        stage('Build and Push Webhook Image') {
//            steps {
//                dir("${WEBHOOK_PATH}") {
//                    echo "Building Docker image for Webhook server..."
//                    withCredentials([usernamePassword(credentialsId: 'DOCKERHUB_CREDENTIALS', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
//                        // Docker Hub 로그인
//                        sh 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin'
                        
//                        script {
//                            docker.build("${DOCKER_REGISTRY}/webhook_image:latest", ".").push()
//                        }
//                    }
//                }
//            }
//        }

        // 랭체인 서버 빌드 및 푸시
        stage('Build and Push Langchain Image') {
            steps {
                dir("${LANGCHAIN_PATH}") {
                    echo "Building Docker image for Langchain server..." 
                    withCredentials([usernamePassword(credentialsId: 'DOCKERHUB_CREDENTIALS', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin'

                        script {
                            docker.build("${DOCKER_REGISTRY}/langchain_image:latest",".").push()
                        }
                    }
                }
            }
        }

        // Docker Compose로 배포
        stage('Deploy with Docker Compose') {
            steps {
                echo "Deploying all services using Docker Compose..."
                script {
                    
                    // env 파일 설정
                    withCredentials([file(credentialsId: 'ENV', variable: 'ENV_FILE_PATH')]) {
                        sh "cp ${ENV_FILE_PATH} .env"
                        
                        // SSH로 EC2에 접속하여 docker-compose 명령어 실행
                        withCredentials([sshUserPrivateKey(credentialsId: 'MAIN_SSH_KEY', keyFileVariable: 'SSH_KEY_FILE')]) {
                            // EC2로 SSH 접속하여 Docker Compose 실행
                            
                            sh """
                                chmod 600 $SSH_KEY_FILE
                                # .env 파일을 원격 서버의 /tmp로 전송
                                scp -o StrictHostKeyChecking=no -i $SSH_KEY_FILE ${ENV_FILE_PATH} $EC2_ID@$EC2_ADDR:/tmp/.env
                            
                                # 원격 서버에서 파일 이동 및 권한 변경
                                ssh -o StrictHostKeyChecking=no -i $SSH_KEY_FILE $EC2_ID@$EC2_ADDR '
                                    sudo mv /tmp/.env /exec/onair/.env &&
                                    sudo chmod 644 /exec/onair/.env
                                '
                        
                                # EC2 서버에서 Docker Compose 실행 및 필요없는 리소스 삭제
                                ssh -o StrictHostKeyChecking=no -i $SSH_KEY_FILE $EC2_ID@$EC2_ADDR '
                                    cd /exec/onair &&
                                    docker-compose -f onair-compose.yaml down &&
                                    
                                    docker volume prune -f &&
                                    docker image prune -f &&
                                    
                                    docker rmi parkdonghyeon/media_image:latest &&
                                    docker rmi parkdonghyeon/main_image:latest &&
                                    docker rmi parkdonghyeon/station_image:latest &&
                                    docker rmi parkdonghyeon/langchain_image:latest &&
                                    
                                    docker-compose -f onair-compose.yaml up -d &&
                                    sudo rm .env
                                '
                            """
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Deployment succeeded."
        }
        
        failure {
            echo "Deployment failed. Please check the logs."
        }
    }
}
